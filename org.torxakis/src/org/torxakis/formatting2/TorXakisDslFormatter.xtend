/*
 * generated by Xtext 2.12.0
 */
package org.torxakis.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.torxakis.services.TorXakisDslGrammarAccess
import org.torxakis.torXakisDsl.ChannelDefs
import org.torxakis.torXakisDsl.CnectDef
import org.torxakis.torXakisDsl.ConstDefs
import org.torxakis.torXakisDsl.FuncDefs
import org.torxakis.torXakisDsl.MapperDef
import org.torxakis.torXakisDsl.Model
import org.torxakis.torXakisDsl.ModelDef
import org.torxakis.torXakisDsl.ProcDefs
import org.torxakis.torXakisDsl.PurpDef
import org.torxakis.torXakisDsl.StautDefs
import org.torxakis.torXakisDsl.TypeDef
import org.torxakis.torXakisDsl.TypeDefs
import org.torxakis.torXakisDsl.TorXakisDslPackage
import org.torxakis.torXakisDsl.Constructor
import org.torxakis.torXakisDsl.NeFieldList
import org.torxakis.torXakisDsl.Fields
import org.torxakis.torXakisDsl.NeConstructorList
import org.torxakis.torXakisDsl.FuncDef
import org.torxakis.torXakisDsl.ValExpr
import org.torxakis.torXakisDsl.ValExprLet
import org.torxakis.torXakisDsl.ValExpr2
import org.torxakis.torXakisDsl.ValExprFunctionCall
import org.torxakis.torXakisDsl.ValExprIte
import org.torxakis.torXakisDsl.ValExprUnaryOperator
import org.torxakis.torXakisDsl.ValExprContructorCall
import org.torxakis.torXakisDsl.NeValExprList
import org.torxakis.torXakisDsl.ValExprBracket
import org.torxakis.torXakisDsl.ValExprOperator
import org.torxakis.torXakisDsl.ProcDef
import org.torxakis.torXakisDsl.NeChannelsDeclList
import org.torxakis.torXakisDsl.ChannelsDecl
import org.torxakis.torXakisDsl.NeVarDeclList
import org.torxakis.torXakisDsl.VarsDecl
import org.torxakis.torXakisDsl.NeChannelNameList
import org.torxakis.torXakisDsl.NeTypeNameList
import org.torxakis.torXakisDsl.ProcessBehaviourBracket
import org.torxakis.torXakisDsl.ProcessBehaviourEnable
import org.torxakis.torXakisDsl.ProcessBehaviourEnableAccept
import org.torxakis.torXakisDsl.ProcessBehaviourDisable
import org.torxakis.torXakisDsl.ProcessBehaviourInterrupt
import org.torxakis.torXakisDsl.ProcessBehaviourSynchronized
import org.torxakis.torXakisDsl.ProcessBehaviourParallel
import org.torxakis.torXakisDsl.ProcessBehaviourChoice
import org.torxakis.torXakisDsl.SynchronizedChannels
import org.torxakis.torXakisDsl.ProcessBehaviourSequence
import org.torxakis.torXakisDsl.ConditionalCommunications
import org.torxakis.torXakisDsl.Communications
import org.torxakis.torXakisDsl.ChannelDef
import org.torxakis.torXakisDsl.ChannelName
import org.torxakis.torXakisDsl.ProcessBehaviourGuarded
import org.torxakis.torXakisDsl.ProcCall
import org.torxakis.torXakisDsl.ProcessBehaviourSynchronizeChannels
import org.torxakis.torXakisDsl.Communication
import org.torxakis.torXakisDsl.ConnectionItem
import org.torxakis.torXakisDsl.ConnectionOut
import org.torxakis.torXakisDsl.ConnectionIn
import org.torxakis.torXakisDsl.Encoding
import org.torxakis.torXakisDsl.Decoding
import org.torxakis.torXakisDsl.VarsDeclaration
import org.torxakis.torXakisDsl.ProcessBehaviourLet
import org.torxakis.torXakisDsl.Assignment
import org.torxakis.torXakisDsl.ProcessBehaviourHide
import org.torxakis.torXakisDsl.Condition
import org.torxakis.torXakisDsl.NeTestGoals
import org.torxakis.torXakisDsl.TestGoal
import org.torxakis.torXakisDsl.VarItem
import org.torxakis.torXakisDsl.InitItem
import org.torxakis.torXakisDsl.TransItem
import org.torxakis.torXakisDsl.Transition
import org.torxakis.torXakisDsl.UpdateList
import org.torxakis.torXakisDsl.Update
import org.torxakis.torXakisDsl.ConstDef

class TorXakisDslFormatter extends AbstractFormatter2 {
	
	@Inject extension TorXakisDslGrammarAccess
    
    def dispatch void format(Model model, extension IFormattableDocument document) {
        for (TypeDefs typedefs : model.getTypeDefs()){
            format(typedefs, document);
        }
        
        for (FuncDefs funcdefs: model.getFuncDefs()){
            format(funcdefs, document);
        }
        
        for (ConstDefs constdefs: model.getConstDefs()){
            format(constdefs, document);
        }
        
        for (ProcDefs procdefs : model.getProcDefs()){
            format(procdefs, document);
        }
        
        for (StautDefs stautdefs : model.getStautDefs()){
            format(stautdefs, document);
        }
        
        for (ChannelDefs channeldefs: model.getChannelDefs()){
            format(channeldefs, document);
        }
        
        for (ModelDef modeldef: model.getModelDef()){
            format(modeldef, document);
        }
        
        for (PurpDef purpdef: model.getPurpDef()){
            format(purpdef, document);
        }
        
        for (MapperDef mapperdef: model.getMapperDef()){
            format(mapperdef, document);
        }
        
        for (CnectDef cnectdef: model.getCnectDef()){
            format(cnectdef, document);
        }
    }
    
    def dispatch void format(TypeDefs typedefs, extension IFormattableDocument document){
        typedefs.regionFor.keyword("TYPEDEF").prepend[newLine].append[oneSpace]
        typedefs.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        typedefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for (TypeDef typedef: typedefs.getTypeDefs()){
            format(typedef, document);
        }
    }
    
    def dispatch void format(TypeDef typedef, extension IFormattableDocument document){
        typedef.regionFor.keyword("::=").surround[oneSpace]
        typedef.regionFor.feature(TorXakisDslPackage.Literals.FIELD_NAME__NAME).append[oneSpace]
        typedef.regionFor.feature(TorXakisDslPackage.Literals.TYPE_NAME__NAME).prepend[oneSpace].append[noSpace]
        format(typedef.getNeConstructorList(), document);
    }
    
    def dispatch void format(FuncDefs funcdefs, extension IFormattableDocument document){
        interior(
            funcdefs.regionFor.keyword('FUNCDEF').prepend[newLine].append[newLine],
            funcdefs.regionFor.keyword('ENDDEF').prepend[newLine].append[newLine]
        )[indent]
        funcdefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for (FuncDef funcdef: funcdefs.getFuncDefs()){
            format(funcdef, document);
        }
    }
    
    def dispatch void format(FuncDef funcdef, extension IFormattableDocument document){
        funcdef.regionFor.feature(TorXakisDslPackage.Literals.FUNC_NAME__NAME).surround[oneSpace]
        funcdef.regionFor.feature(TorXakisDslPackage.Literals.TYPE_NAME__NAME).surround[oneSpace]
        funcdef.regionFor.keyword("(").surround[oneSpace]
        funcdef.regionFor.keyword(")").surround[oneSpace]
        funcdef.regionFor.keyword("::").surround[oneSpace]
        funcdef.regionFor.keyword('::=').prepend[oneSpace].append[newLine]
        format(funcdef.valExpr, document);
        format(funcdef.neVarsDelarationList, document);
    }
    
    def dispatch void format(ValExprIte valexprite, extension IFormattableDocument document){
        interior(
            valexprite.regionFor.keyword('THEN').prepend[newLine].append[newLine],
            valexprite.regionFor.keyword('ELSE').prepend[newLine].append[newLine]
        )[indent]
        interior(
            valexprite.regionFor.keyword('ELSE').prepend[newLine].append[newLine],
            valexprite.regionFor.keyword('FI').prepend[newLine].append[newLine]
        )[indent]
        format(valexprite.thenValExpr, document);
        format(valexprite.elseValExpr, document);
    }
    def dispatch void format(ValExpr valexpr, extension IFormattableDocument document){
        valexpr.regionFor.feature(TorXakisDslPackage.Literals.FUNC_NAME__NAME).prepend[oneSpace].append[oneSpace]
    }
    
    def dispatch void format(ValExprOperator valexproperator, extension IFormattableDocument document){
        valexproperator.regionFor.feature(TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__OPERATOR).prepend[oneSpace].append[newLine]
        format(valexproperator.left, document);
        format(valexproperator.right, document);
    }
    
    def dispatch void format(ValExpr2 valexpr2, extension IFormattableDocument document){
        valexpr2.prepend[oneSpace].append[oneSpace]
        valexpr2.regionFor.feature(TorXakisDslPackage.Literals.FUNC_NAME__NAME).prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(ValExprLet valexprlet, extension IFormattableDocument document){
        valexprlet.regionFor.keyword('LET').prepend[newLine].append[oneSpace]
        format(valexprlet.valExpr, document);
        for(Assignment assignment: valexprlet.assignments){
            format(assignment, document);
        }
    }
    
    def dispatch void format(ValExprFunctionCall valexprfunccall, extension IFormattableDocument document){
        valexprfunccall.prepend[oneSpace]
        format(valexprfunccall.neValExprList, document);
    }
    
    def dispatch void format(NeValExprList nevalexprlist, extension IFormattableDocument document){
        for(ValExpr valexpr: nevalexprlist.valExprs){
            format(valexpr, document);
        }
    }
    
    def dispatch void format(ValExprUnaryOperator unaryoperator, extension IFormattableDocument document){
        unaryoperator.regionFor.feature(TorXakisDslPackage.Literals.VAL_EXPR_OPERATOR__OPERATOR).prepend[oneSpace].append[newLine]
        format(unaryoperator.valExpr, document);
    }
    
    def dispatch void format(ValExprContructorCall constructorcall, extension IFormattableDocument document){
        constructorcall.prepend[oneSpace]
        format(constructorcall.neValExprList, document);
    }
    
    def dispatch void format(ValExprBracket bracket, extension IFormattableDocument document){
        bracket.regionFor.keyword('(').surround[oneSpace]
        bracket.regionFor.keyword(')').surround[oneSpace]
        format(bracket.valExpr, document);
    }
    
    def dispatch void format(ConstDefs constdefs, extension IFormattableDocument document){
        interior(
            constdefs.regionFor.keyword("CONSTDEF").prepend[newLine].append[newLine],
            constdefs.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        constdefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for(ConstDef constdef: constdefs.constDefs){
            format(constdef, document);
        }
    }
    
    def dispatch void format(ConstDef constdef, extension IFormattableDocument document){
        constdef.regionFor.keyword("::").surround[oneSpace]
        constdef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
    }
    
    def dispatch void format(ProcDefs procdefs, extension IFormattableDocument document){
        interior(
            procdefs.regionFor.keyword("PROCDEF").prepend[newLine].append[newLine],
            procdefs.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        procdefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for(ProcDef prodef: procdefs.getProcDefs()){
            format(prodef, document);
        }
    }
    
    def dispatch void format(ProcDef procdef, extension IFormattableDocument document){
        procdef.regionFor.feature(TorXakisDslPackage.Literals.PROC_NAME__NAME).surround[oneSpace]
        procdef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        interior(
            procdef.regionFor.keyword('[').append[oneSpace],
            procdef.regionFor.keyword(']').prepend[newLine]
        )[indent]
        format(procdef.getNeChannelDeclList(), document);
        format(procdef.neVarDeclList, document);
        format(procdef.processBehaviour, document);
    }
    
    def dispatch void format(ProcessBehaviourEnable pbenable, extension IFormattableDocument document){
        pbenable.regionFor.keyword(">>>").prepend[oneSpace].append[newLine]
        format(pbenable.left, document);
        format(pbenable.right, document);
    }
    
    def dispatch void format(ProcessBehaviourEnableAccept pbenableaceept, extension IFormattableDocument document){
        pbenableaceept.regionFor.keyword(">>>").prepend[oneSpace].append[newLine]
        format(pbenableaceept.left, document);
        format(pbenableaceept.right, document);
    }
    
    def dispatch void format(ProcessBehaviourDisable pbdisable, extension IFormattableDocument document){
        pbdisable.regionFor.keyword("[>>").prepend[oneSpace].append[newLine]
        format(pbdisable.left, document);
        format(pbdisable.right, document);
    }
    
    def dispatch void format(ProcessBehaviourInterrupt pbinterrupt, extension IFormattableDocument document){
        pbinterrupt.regionFor.keyword("[><").prepend[oneSpace].append[newLine]
        format(pbinterrupt.left, document);
        format(pbinterrupt.right, document);
    }
    
    def dispatch void format(ProcessBehaviourSynchronized pbesync, extension IFormattableDocument document){
        pbesync.regionFor.keyword("||").prepend[oneSpace].append[newLine]
        format(pbesync.left, document);
        format(pbesync.right, document);
    }
    
    def dispatch void format(ProcessBehaviourParallel pbparallel, extension IFormattableDocument document){
        pbparallel.regionFor.keyword("|||").prepend[oneSpace].append[newLine]
        format(pbparallel.left, document);
        format(pbparallel.right, document);
    }
    
    def dispatch void format(ProcessBehaviourChoice pbpchoice, extension IFormattableDocument document){
        pbpchoice.regionFor.keyword("##").prepend[oneSpace].append[newLine]
        format(pbpchoice.left, document);
        format(pbpchoice.right, document);
    }
    
    def dispatch void format(ProcessBehaviourSequence pbsequence, extension IFormattableDocument document){
        pbsequence.regionFor.keyword(">->").prepend[oneSpace].append[newLine]
        format(pbsequence.sub, document);
        format(pbsequence.conditionalCommunications, document);
    }
    
    def dispatch void format(ProcessBehaviourSynchronizeChannels pbsyncchan, extension IFormattableDocument document){
        format(pbsyncchan.left, document);
        format(pbsyncchan.right, document);
        format(pbsyncchan.synchronizedChannels, document);
    }
    
    def dispatch void format(ProcessBehaviourLet pblet, extension IFormattableDocument document){
        pblet.regionFor.keyword("LET").prepend[newLine]
        format(pblet.sub, document);
        for(Assignment assignment: pblet.assignments){
            format(assignment, document);
        }
    }
    
    def dispatch void format(ProcessBehaviourHide pbhide, extension IFormattableDocument document){
        pbhide.regionFor.keyword("HIDE").prepend[newLine]
        interior(
            pbhide.regionFor.keyword('[').append[newLine],
            pbhide.regionFor.keyword(']').append[oneSpace].prepend[newLine]
        )[indent]
        format(pbhide.neChannelsDeclList, document);
        format(pbhide.sub, document);
    }
    
    def dispatch void format(ProcCall proccall, extension IFormattableDocument document){
        interior(
            proccall.regionFor.keyword('[').append[newLine],
            proccall.regionFor.keyword(']').append[oneSpace].prepend[newLine]
        )[indent]
        format(proccall.neChannelNameList, document);
        format(proccall.neValExprList, document);
    }
    
    def dispatch void format(ConditionalCommunications condComms, extension IFormattableDocument document){
        for(Communications comms: condComms.communications){
            format(comms, document);
        }
        format(condComms.condition, document);
    }
    
    def dispatch void format(Communications comms, extension IFormattableDocument document){
        comms.regionFor.keyword("|").prepend[oneSpace].append[newLine]
        for(Communication comm: comms.communications){
            format(comm, document)
        }
    }
    
    def dispatch void format(Communication comm, extension IFormattableDocument document){
        comm.regionFor.keyword("EXIT").prepend[newLine]
    }
    
    def dispatch void format(NeVarDeclList neVarDeclList, extension IFormattableDocument document){
        neVarDeclList.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for(VarsDecl varsdecl: neVarDeclList.getVarsDecls()){
            format(varsdecl, document);
        }
    }
    
    def dispatch void format(SynchronizedChannels syncChannels, extension IFormattableDocument document){
        syncChannels.regionFor.keyword("|[").prepend[newLine].append[oneSpace]
        syncChannels.regionFor.keyword("]|").prepend[oneSpace].append[newLine]
    }
    def dispatch void format(NeChannelsDeclList neChannelsDeclList, extension IFormattableDocument document){
        for(ChannelsDecl channelsdecl: neChannelsDeclList.channelsDecls){
            format(channelsdecl, document);
        }
    }
    
    def dispatch void format(ChannelsDecl channelsdecl, extension IFormattableDocument document){
        channelsdecl.regionFor.keyword("::").surround[oneSpace]
        format(channelsdecl.neChannelNameList, document);
        format(channelsdecl.neTypeNameList, document);
    }
    
    def dispatch void format(NeChannelNameList neChannelNameList, extension IFormattableDocument document){
        neChannelNameList.regionFor.keyword(",").prepend[oneSpace].append[newLine]
        for(ChannelName channelname :neChannelNameList.channelNames){
            format(channelname, document);
        }
    }
    
    def dispatch void format(ChannelName channelname, extension IFormattableDocument document){
        channelname.regionFor.feature(TorXakisDslPackage.Literals.CHANNEL_NAME__NAME).prepend[newLine]
    }
    
    def dispatch void format(ProcessBehaviourBracket pbbracket, extension IFormattableDocument document){
        interior(
            pbbracket.regionFor.keyword('(').append[newLine],
            pbbracket.regionFor.keyword(')').prepend[newLine]
        )[indent]
        format(pbbracket.sub, document);
    }
    
    def dispatch void format(ProcessBehaviourGuarded pbguarded, extension IFormattableDocument document){
        pbguarded.regionFor.keyword("=>>").prepend[oneSpace].append[newLine]
        format(pbguarded.sub, document);
    }
    def dispatch void format(StautDefs stautdefs, extension IFormattableDocument document){
        interior(
            stautdefs.regionFor.keyword("STAUTDEF").prepend[newLine].append[newLine],
            stautdefs.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        stautdefs.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        stautdefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
    }
    
    def dispatch void format(ChannelDefs channeldefs, extension IFormattableDocument document){
        interior(
            channeldefs.regionFor.keyword("CHANDEF").prepend[newLine].append[newLine],
            channeldefs.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        channeldefs.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for(ChannelDef channeldef: channeldefs.channelDefs){
            format(channeldef, document);
        }
    }
    
    def dispatch void format(ChannelDef channeldef, extension IFormattableDocument document){
        channeldef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        format(channeldef.neChannelDeclList, document);
    }
    
    def dispatch void format(ModelDef modeldef, extension IFormattableDocument document){
        interior(
            modeldef.regionFor.keyword("MODELDEF").prepend[newLine].append[newLine],
            modeldef.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        modeldef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        modeldef.allRegionsFor.keywords("CHAN").forEach[
            prepend[newLine].append[oneSpace]
        ]
        modeldef.regionFor.keyword("BEHAVIOUR").prepend[newLine].append[oneSpace]
        format(modeldef.neInputChannelNameList, document);
        format(modeldef.neOutputChannelNameList, document);
        format(modeldef.processBehaviour, document);
    }
    
    def dispatch void format(PurpDef purpdef, extension IFormattableDocument document){
        interior(
            purpdef.regionFor.keyword("PURPDEF").prepend[newLine].append[newLine],
            purpdef.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        purpdef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        purpdef.allRegionsFor.keywords("CHAN").forEach[
            prepend[newLine].append[oneSpace]
        ]
        format(purpdef.neInputChannelNameList, document);
        format(purpdef.neOutputChannelNameList, document);
        format(purpdef.testGoals, document);
    }
    
    def dispatch void format(NeTestGoals neTestGoals, extension IFormattableDocument document){
        for(TestGoal testgoal: neTestGoals.testGoals){
            format(testgoal, document);
        }
    }
    
    def dispatch void format(TestGoal testGoals, extension IFormattableDocument document){
        testGoals.regionFor.keyword("GOAL").prepend[newLine].append[oneSpace]
        testGoals.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        format(testGoals.processBehaviour, document);
    }
    def dispatch void format(MapperDef mapperdef, extension IFormattableDocument document){
        interior(
            mapperdef.regionFor.keyword("MAPPERDEF").prepend[newLine].append[newLine],
            mapperdef.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        mapperdef.regionFor.keyword("::=").surround[oneSpace]
        mapperdef.allRegionsFor.keywords("CHAN").forEach[
            prepend[newLine].append[oneSpace]
        ]
        mapperdef.regionFor.keyword("BEHAVIOUR").prepend[newLine].append[oneSpace]
        //mapperdef.regionFor.keyword("CHAN OUT").prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(CnectDef cnectdef, extension IFormattableDocument document){
        interior(
            cnectdef.regionFor.keyword("CNECTDEF").prepend[newLine].append[newLine],
            cnectdef.regionFor.keyword("ENDDEF").prepend[newLine].append[newLine]
        )[indent]
        cnectdef.regionFor.keyword("::=").prepend[oneSpace].append[newLine]
        cnectdef.regionFor.feature(TorXakisDslPackage.Literals.CNECT_NAME__NAME).surround[oneSpace]
        cnectdef.regionFor.feature(TorXakisDslPackage.Literals.CNECT_DEF__CNECT_TYPE).surround[oneSpace]
        for(ConnectionItem connectionitem: cnectdef.connectionItems){
            format(connectionitem, document);
        }
    }
    
    def dispatch void format(Encoding encoding, extension IFormattableDocument document){
        encoding.regionFor.keyword("ENCODE").prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(ConnectionIn connin, extension IFormattableDocument document){
        connin.regionFor.keyword("CHAN").prepend[newLine].append[oneSpace]
        connin.regionFor.keyword("HOST").prepend[newLine].append[oneSpace]
        connin.regionFor.keyword("PORT").prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(ConnectionOut connout, extension IFormattableDocument document){
        connout.regionFor.keyword("CHAN").prepend[newLine].append[oneSpace]
        connout.regionFor.keyword("HOST").prepend[newLine].append[oneSpace]
        connout.regionFor.keyword("PORT").prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(Decoding decoding, extension IFormattableDocument document){
        decoding.regionFor.keyword("DECODE").prepend[newLine].append[oneSpace]
    }
    
    def dispatch void format(NeConstructorList neconstructorlist, extension IFormattableDocument document){
        for(Constructor constructor: neconstructorlist.getConstructors()){
            format(constructor, document);
        }
    }
    def dispatch void format(Constructor constructor, extension IFormattableDocument document){
        constructor.regionFor.feature(TorXakisDslPackage.Literals.CONST_NAME__NAME).surround[oneSpace]
        interior(
            constructor.regionFor.keyword('{').append[newLine],
            constructor.regionFor.keyword('}').prepend[newLine]
        )[indent]
        format(constructor.getNeFieldsList(), document);
    }
    
    def dispatch void format(NeFieldList nefieldlist, extension IFormattableDocument document){
        nefieldlist.regionFor.keyword(";").prepend[oneSpace].append[newLine]
        for (Fields fields: nefieldlist.getFields()){
            format(fields, document);
        }
    }
    
    def dispatch void format(Fields fields, extension IFormattableDocument document){
        fields.prepend[newLine]
        fields.regionFor.keyword("::").surround[oneSpace]
    }
    
    def dispatch void format(VarsDeclaration varsDecl, extension IFormattableDocument document){
        varsDecl.regionFor.keyword("::").surround[oneSpace]
    }
    
    def dispatch void format(VarsDecl varsDecl, extension IFormattableDocument document){
        varsDecl.regionFor.keyword("::").surround[oneSpace]
    }
    
    def dispatch void format(NeTypeNameList neTypeNameList, extension IFormattableDocument document){
        neTypeNameList.regionFor.keyword("#").surround[oneSpace]
    }
    
    def dispatch void format(Condition cond, extension IFormattableDocument document){
        cond.regionFor.keyword("[[").prepend[oneSpace].append[newLine]
        cond.regionFor.keyword("]]").prepend[oneSpace].append[newLine]
    }
    
    def dispatch void format(VarItem varitem, extension IFormattableDocument document){
        varitem.regionFor.keyword("VAR").prepend[newLine].append[oneSpace]
        format(varitem.neVarsDelarationList, document);
    }
    
    def dispatch void format(InitItem inititem, extension IFormattableDocument document){
        inititem.regionFor.keyword("INIT").prepend[newLine].append[oneSpace]
        format(inititem.updateList, document);
    }
    
    def dispatch void format(TransItem transitem, extension IFormattableDocument document){
        transitem.regionFor.keyword("TRANS").prepend[newLine].append[oneSpace]
        for(Transition trans: transitem.transitions){
            format(trans, document);
        }
    }
    
    def dispatch void format(Transition transition, extension IFormattableDocument document){
        transition.regionFor.keyword("->").prepend[oneSpace].append[newLine]
        format(transition.conditionalCommunications, document);
        format(transition.updateList, document);
    }
    
    def dispatch void format(UpdateList updatelist, extension IFormattableDocument document){
        for(Update update: updatelist.updates){
            format(update, document);
        }
    }
    
    def dispatch void format(Update update, extension IFormattableDocument document){
        update.regionFor.keyword(":=").prepend[oneSpace].append[newLine]
    }
    
}
